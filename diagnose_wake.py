#!/usr/bin/env python3
"""
ÌõÑÎ•ò Î¨∏Ï†ú ÏßÑÎã® Ïä§ÌÅ¨Î¶ΩÌä∏
CFD Îç∞Ïù¥ÌÑ∞ÏôÄ PINN ÏòàÏ∏°ÏóêÏÑú ÌõÑÎ•ò ÏòÅÏó≠ Î∂ÑÏÑù
"""

import torch
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from pathlib import Path
from typing import Dict

# ÌîÑÎ°úÏ†ùÌä∏ Î™®Îìà import
from config import *
from pinn_model import create_pinn_model
from data_io import DataProcessor
from boundary_conditions import create_boundary_manager

plt.rcParams['font.family'] = 'DejaVu Sans'
plt.rcParams['axes.unicode_minus'] = False

class WakeDiagnoser:
    """ÌõÑÎ•ò ÏßÑÎã® ÌÅ¥ÎûòÏä§"""
    
    def __init__(self):
        """Ï¥àÍ∏∞Ìôî"""
        self.phys_params = PhysicalParameters()
        self.domain_params = DomainParameters()
        self.pinn_config = PINNConfig()
        self.file_config = FileConfig()
        self.results_dir = Path(r"C:\Users\Master\Desktop\NACA0012_Flutter_PINN\results")
        
        # Î™®Îç∏ Î°úÎìú
        self.model = None
        self.load_model()
        
        # Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨Í∏∞
        self.data_processor = DataProcessor(
            self.phys_params, self.domain_params, self.file_config
        )
        
        print("‚úÖ ÌõÑÎ•ò ÏßÑÎã® ÎèÑÍµ¨ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å")
    
    def load_model(self):
        """Î™®Îç∏ Î°úÎìú"""
        model_candidates = [
            self.results_dir / "lbfgs_best_model.pt",
            self.results_dir / "best_model.pt",
            self.results_dir / "checkpoint_epoch_4999.pt"
        ]
        
        model_path = None
        for candidate in model_candidates:
            if candidate.exists():
                model_path = candidate
                break
        
        if model_path is None:
            print("‚ùå Î™®Îç∏ ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§!")
            return
        
        self.model = create_pinn_model(self.pinn_config)
        checkpoint = torch.load(model_path, map_location='cpu')
        self.model.load_state_dict(checkpoint['model_state_dict'])
        self.model.eval()
        
        print(f"‚úÖ Î™®Îç∏ Î°úÎìú: {model_path.name}")
    
    def analyze_original_cfd_data(self):
        """ÏõêÎ≥∏ CFD Îç∞Ïù¥ÌÑ∞ ÌõÑÎ•ò Î∂ÑÏÑù"""
        print("üîç ÏõêÎ≥∏ CFD Îç∞Ïù¥ÌÑ∞ ÌõÑÎ•ò Î∂ÑÏÑù")
        print("="*50)
        
        try:
            # CFD Îç∞Ïù¥ÌÑ∞ Î°úÎìú
            data = self.data_processor.load_all_data()
            cfd_data = data['cfd']
            
            # ÌõÑÎ•ò ÏòÅÏó≠ Ï†ïÏùò (ÏóêÏñ¥Ìè¨Ïùº Îí§Ï™Ω)
            wake_mask = (cfd_data['x'] > 1.0) & (cfd_data['x'] < 3.0) & \
                       (abs(cfd_data['y']) < 0.5)
            
            wake_data = cfd_data[wake_mask]
            
            print(f"üìä Ï†ÑÏ≤¥ CFD Ï†ê Í∞úÏàò: {len(cfd_data)}")
            print(f"üìä ÌõÑÎ•ò ÏòÅÏó≠ Ï†ê Í∞úÏàò: {len(wake_data)}")
            print(f"üìä ÌõÑÎ•ò ÎπÑÏú®: {len(wake_data)/len(cfd_data)*100:.1f}%")
            
            if len(wake_data) > 0:
                print(f"üìà ÌõÑÎ•ò ÏòÅÏó≠ ÏÜçÎèÑ Î≤îÏúÑ:")
                print(f"   U: {wake_data['u'].min():.3f} ~ {wake_data['u'].max():.3f}")
                print(f"   V: {wake_data['v'].min():.3f} ~ {wake_data['v'].max():.3f}")
                print(f"   |V|: {np.sqrt(wake_data['u']**2 + wake_data['v']**2).mean():.3f} (ÌèâÍ∑†)")
                
                # ÌõÑÎ•ò ÏãúÍ∞ÅÌôî
                self.plot_cfd_wake_analysis(cfd_data, wake_data)
                return True
            else:
                print("‚ùå CFD Îç∞Ïù¥ÌÑ∞Ïóê ÌõÑÎ•ò ÏòÅÏó≠Ïù¥ ÏóÜÏäµÎãàÎã§!")
                return False
                
        except Exception as e:
            print(f"‚ùå CFD Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù Ïã§Ìå®: {e}")
            return False
    
    def plot_cfd_wake_analysis(self, cfd_data, wake_data):
        """CFD ÌõÑÎ•ò Î∂ÑÏÑù ÏãúÍ∞ÅÌôî"""
        fig, axes = plt.subplots(2, 2, figsize=(16, 12))
        
        # 1. Ï†ÑÏ≤¥ ÏÜçÎèÑ Î∂ÑÌè¨
        scatter1 = axes[0, 0].scatter(cfd_data['x'], cfd_data['y'], 
                                     c=np.sqrt(cfd_data['u']**2 + cfd_data['v']**2), 
                                     s=1, cmap='viridis', alpha=0.6)
        axes[0, 0].set_title('CFD Data: Velocity Magnitude', fontsize=14, fontweight='bold')
        axes[0, 0].set_xlabel('x/C')
        axes[0, 0].set_ylabel('y/C')
        plt.colorbar(scatter1, ax=axes[0, 0])
        
        # 2. ÌõÑÎ•ò ÏòÅÏó≠ Í∞ïÏ°∞
        axes[0, 1].scatter(cfd_data['x'], cfd_data['y'], c='lightgray', s=0.5, alpha=0.3)
        scatter2 = axes[0, 1].scatter(wake_data['x'], wake_data['y'], 
                                     c=np.sqrt(wake_data['u']**2 + wake_data['v']**2), 
                                     s=3, cmap='plasma')
        axes[0, 1].set_title('Wake Region Highlighted', fontsize=14, fontweight='bold')
        axes[0, 1].set_xlabel('x/C')
        axes[0, 1].set_ylabel('y/C')
        axes[0, 1].axvline(x=1.0, color='red', linestyle='--', alpha=0.7, label='Wake Start')
        axes[0, 1].legend()
        plt.colorbar(scatter2, ax=axes[0, 1])
        
        # 3. ÌõÑÎ•ò Ï§ëÏã¨ÏÑ† ÏÜçÎèÑ ÌîÑÎ°úÌïÑ
        if len(wake_data) > 0:
            # Ï§ëÏã¨ÏÑ† Í∑ºÏ≤ò Îç∞Ïù¥ÌÑ∞ (|y| < 0.1)
            centerline_mask = abs(wake_data['y']) < 0.1
            centerline_data = wake_data[centerline_mask]
            
            if len(centerline_data) > 0:
                # x ÏúÑÏπòÎ≥ÑÎ°ú Ï†ïÎ†¨
                centerline_sorted = centerline_data.sort_values('x')
                axes[1, 0].plot(centerline_sorted['x'], centerline_sorted['u'], 'bo-', 
                               markersize=4, linewidth=2, label='U velocity')
                axes[1, 0].axhline(y=1.0, color='red', linestyle='--', alpha=0.7, label='Free stream')
                axes[1, 0].set_title('Wake Centerline Velocity Deficit', fontsize=14, fontweight='bold')
                axes[1, 0].set_xlabel('x/C')
                axes[1, 0].set_ylabel('U velocity')
                axes[1, 0].legend()
                axes[1, 0].grid(True, alpha=0.3)
        
        # 4. ÌõÑÎ•ò Ìè≠ Î∂ÑÏÑù
        wake_cross_sections = []
        x_positions = np.linspace(1.2, 2.5, 8)
        
        for x_pos in x_positions:
            cross_section = wake_data[abs(wake_data['x'] - x_pos) < 0.1]
            if len(cross_section) > 5:
                cross_section_sorted = cross_section.sort_values('y')
                axes[1, 1].plot(cross_section_sorted['u'], cross_section_sorted['y'], 
                               'o-', alpha=0.7, markersize=3, 
                               label=f'x/C = {x_pos:.1f}')
        
        axes[1, 1].axvline(x=1.0, color='red', linestyle='--', alpha=0.7, label='Free stream')
        axes[1, 1].set_title('Wake Cross-sections', fontsize=14, fontweight='bold')
        axes[1, 1].set_xlabel('U velocity')
        axes[1, 1].set_ylabel('y/C')
        axes[1, 1].legend(bbox_to_anchor=(1.05, 1), loc='upper left')
        axes[1, 1].grid(True, alpha=0.3)
        
        plt.tight_layout()
        
        # Ï†ÄÏû•
        save_path = self.results_dir / "cfd_wake_analysis.png"
        plt.savefig(save_path, dpi=300, bbox_inches='tight')
        plt.show()
        
        print(f"‚úÖ CFD ÌõÑÎ•ò Î∂ÑÏÑù Ï†ÄÏû•: {save_path}")
    
    def compare_pinn_vs_cfd_wake(self):
        """PINN vs CFD ÌõÑÎ•ò ÎπÑÍµê"""
        print("üîÑ PINN vs CFD ÌõÑÎ•ò ÎπÑÍµê")
        print("="*50)
        
        if self.model is None:
            print("‚ùå Î™®Îç∏Ïù¥ Î°úÎìúÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§!")
            return
        
        # ÌõÑÎ•ò ÏòÅÏó≠ Í∑∏Î¶¨Îìú ÏÉùÏÑ±
        x_wake = np.linspace(1.0, 3.0, 100)
        y_wake = np.linspace(-0.5, 0.5, 50)
        X_wake, Y_wake = np.meshgrid(x_wake, y_wake)
        
        # ÏãúÍ∞Ñ Ï¢åÌëú (t=0)
        T_wake = np.zeros_like(X_wake)
        
        # PINN ÏòàÏ∏°
        grid_points = torch.tensor(
            np.stack([T_wake.flatten(), X_wake.flatten(), Y_wake.flatten()], axis=1),
            dtype=torch.float32
        )
        
        with torch.no_grad():
            predictions = self.model(grid_points)
        
        u_pinn = predictions[:, 0].cpu().numpy().reshape(X_wake.shape)
        v_pinn = predictions[:, 1].cpu().numpy().reshape(X_wake.shape)
        p_pinn = predictions[:, 2].cpu().numpy().reshape(X_wake.shape)
        
        # ÎπÑÍµê ÏãúÍ∞ÅÌôî
        fig, axes = plt.subplots(2, 3, figsize=(18, 12))
        
        # PINN Í≤∞Í≥º
        im1 = axes[0, 0].contourf(X_wake, Y_wake, u_pinn, levels=50, cmap='coolwarm')
        axes[0, 0].set_title('PINN: U Velocity in Wake', fontsize=14, fontweight='bold')
        plt.colorbar(im1, ax=axes[0, 0])
        
        im2 = axes[0, 1].contourf(X_wake, Y_wake, v_pinn, levels=50, cmap='coolwarm')
        axes[0, 1].set_title('PINN: V Velocity in Wake', fontsize=14, fontweight='bold')
        plt.colorbar(im2, ax=axes[0, 1])
        
        velocity_mag_pinn = np.sqrt(u_pinn**2 + v_pinn**2)
        im3 = axes[0, 2].contourf(X_wake, Y_wake, velocity_mag_pinn, levels=50, cmap='viridis')
        axes[0, 2].set_title('PINN: Velocity Magnitude', fontsize=14, fontweight='bold')
        plt.colorbar(im3, ax=axes[0, 2])
        
        # CFD Îç∞Ïù¥ÌÑ∞ (ÏûàÎäî Í≤ΩÏö∞)
        try:
            data = self.data_processor.load_all_data()
            cfd_data = data['cfd']
            
            wake_mask = (cfd_data['x'] > 1.0) & (cfd_data['x'] < 3.0) & \
                       (abs(cfd_data['y']) < 0.5)
            wake_cfd = cfd_data[wake_mask]
            
            if len(wake_cfd) > 0:
                scatter1 = axes[1, 0].scatter(wake_cfd['x'], wake_cfd['y'], c=wake_cfd['u'], 
                                            s=10, cmap='coolwarm')
                axes[1, 0].set_title('CFD: U Velocity in Wake', fontsize=14, fontweight='bold')
                plt.colorbar(scatter1, ax=axes[1, 0])
                
                scatter2 = axes[1, 1].scatter(wake_cfd['x'], wake_cfd['y'], c=wake_cfd['v'], 
                                            s=10, cmap='coolwarm')
                axes[1, 1].set_title('CFD: V Velocity in Wake', fontsize=14, fontweight='bold')
                plt.colorbar(scatter2, ax=axes[1, 1])
                
                vel_mag_cfd = np.sqrt(wake_cfd['u']**2 + wake_cfd['v']**2)
                scatter3 = axes[1, 2].scatter(wake_cfd['x'], wake_cfd['y'], c=vel_mag_cfd, 
                                            s=10, cmap='viridis')
                axes[1, 2].set_title('CFD: Velocity Magnitude', fontsize=14, fontweight='bold')
                plt.colorbar(scatter3, ax=axes[1, 2])
            else:
                for ax in axes[1, :]:
                    ax.text(0.5, 0.5, 'No CFD Wake Data', ha='center', va='center', 
                           transform=ax.transAxes, fontsize=16)
                    ax.set_title('CFD Data (Not Available)', fontsize=14)
        
        except Exception as e:
            print(f"‚ö†Ô∏è CFD Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®: {e}")
            for ax in axes[1, :]:
                ax.text(0.5, 0.5, f'CFD Load Error:\n{str(e)[:50]}...', 
                       ha='center', va='center', transform=ax.transAxes, fontsize=12)
        
        for ax in axes.flat:
            ax.set_xlabel('x/C')
            ax.set_ylabel('y/C')
            ax.grid(True, alpha=0.3)
        
        plt.tight_layout()
        
        # Ï†ÄÏû•
        save_path = self.results_dir / "pinn_vs_cfd_wake_comparison.png"
        plt.savefig(save_path, dpi=300, bbox_inches='tight')
        plt.show()
        
        print(f"‚úÖ PINN vs CFD ÌõÑÎ•ò ÎπÑÍµê Ï†ÄÏû•: {save_path}")
        
        # Ï†ïÎüâÏ†Å Î∂ÑÏÑù
        print(f"\nüìä PINN ÌõÑÎ•ò Î∂ÑÏÑù:")
        print(f"   ÌõÑÎ•ò Ï§ëÏã¨ÏÑ† ÏÜçÎèÑ Î∂ÄÏ°±: {1.0 - u_pinn[25, 50:]:.3f} (ÌèâÍ∑†)")
        print(f"   ÌõÑÎ•ò ÏµúÎåÄ ÏÜçÎèÑ Î∂ÄÏ°±: {1.0 - u_pinn.min():.3f}")
        
        if u_pinn.min() > 0.95:
            print("‚ö†Ô∏è ÌõÑÎ•òÍ∞Ä Í±∞Ïùò ÌòïÏÑ±ÎêòÏßÄ ÏïäÏùå - ÌïôÏäµ Î¨∏Ï†ú Í∞ÄÎä•ÏÑ± ÎÜíÏùå")
        elif u_pinn.min() > 0.8:
            print("‚ö†Ô∏è ÏïΩÌïú ÌõÑÎ•ò - Í∞úÏÑ† ÌïÑÏöî")
        else:
            print("‚úÖ ÌõÑÎ•òÍ∞Ä Ï†ÅÏ†àÌûà ÌòïÏÑ±Îê®")
    
    def run_complete_wake_diagnosis(self):
        """ÏôÑÏ†ÑÌïú ÌõÑÎ•ò ÏßÑÎã®"""
        print("üîç NACA 0012 ÌõÑÎ•ò ÏôÑÏ†Ñ ÏßÑÎã®")
        print("="*60)
        
        # 1. ÏõêÎ≥∏ CFD Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù
        has_cfd_wake = self.analyze_original_cfd_data()
        
        # 2. PINN vs CFD ÎπÑÍµê
        self.compare_pinn_vs_cfd_wake()
        
        # 3. ÏßÑÎã® Í≤∞Í≥º Î∞è Í∂åÏû•ÏÇ¨Ìï≠
        print(f"\nüéØ ÌõÑÎ•ò ÏßÑÎã® Í≤∞Í≥º Î∞è Í∂åÏû•ÏÇ¨Ìï≠:")
        print("="*60)
        
        if not has_cfd_wake:
            print("‚ùå Ï£ºÏöî Î¨∏Ï†ú: CFD Îç∞Ïù¥ÌÑ∞Ïóê ÌõÑÎ•ò Ï†ïÎ≥¥ Î∂ÄÏ°±")
            print("   ‚Üí Ìï¥Í≤∞Ï±Ö: Îçî Í∏¥ ÎèÑÎ©îÏù∏Ïùò CFD Îç∞Ïù¥ÌÑ∞ ÌïÑÏöî")
            print("   ‚Üí ÎòêÎäî: Ìï©ÏÑ± ÌõÑÎ•ò Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä")
        else:
            print("‚úÖ CFD Îç∞Ïù¥ÌÑ∞Ïóê ÌõÑÎ•ò Ï†ïÎ≥¥ Ï°¥Ïû¨")
            print("   ‚Üí PINN ÌïôÏäµ Î∞©Î≤ï Í∞úÏÑ† ÌïÑÏöî:")
            print("     ‚Ä¢ ÌõÑÎ•ò ÏòÅÏó≠ ÏÉòÌîåÎßÅ Í∞ÄÏ§ëÏπò Ï¶ùÍ∞Ä")
            print("     ‚Ä¢ PDE ÏÜêÏã§ÏóêÏÑú Ïö¥ÎèôÎüâ Î≥¥Ï°¥ Í∞ïÌôî")
            print("     ‚Ä¢ Îçî ÎÜíÏùÄ Reynolds Ïàò ÌïôÏäµ")

def main():
    """Î©îÏù∏ Ìï®Ïàò"""
    diagnoser = WakeDiagnoser()
    diagnoser.run_complete_wake_diagnosis()

if __name__ == "__main__":
    main()